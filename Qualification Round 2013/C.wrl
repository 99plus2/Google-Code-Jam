Problem: Fair and Square
Language: Whirl
Author: KirarinSnow
Usage: whirl thisfile.wrl <input.in >output.out
Comments: Using the Ruby interpreter:
          http://www.bigzaphod.org/whirl/kang-whirl.rb
          Works only for small input.


    In Whirl, the evaluated code consists of the characters zero and one, 
    and everything else is a comment. To avoid having the interpreter mistake
    comments for code to be evaluated, I have used the letters I and O
    to denote the digits one and zero, respectively, in the comments.



      MEMORY FORMAT:
      OPVAL | MATHVAL | MEMORY (asterisk denotes current memory location)



      _ denotes an unknown value.

      Operations preceded by - are math ring operations; others are op ring.

      Our general memory (not specific to any individual problem) consists
      of six slots: V C T X Y Z. This is followed by local memory, to be used
      for each test case, as needed by the problem.

      V is the number of instructions used to compute each test case.
      This value will be used in order to jump back to the appropriate point
      in order to handle the next test case.

      C is the case counter, initialized to T and decremented for each case.

      T is the total number of cases, set to the first integer read from stdin.

      X, Y, and Z are used for computation.


BEGIN PROGRAM

                   HEAD OF GENERAL MEMORY
           _ | _ | _*

STORE V (modify depending on problem):
      V = -55I3



00 NOOP
11111100 ZERO
00 NOOP
111100 NOT
00 NOOP
111100 STORE
00 NOOP
100 ADD
00 NOOP
0100 STORE
00 NOOP
0100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
01100 MULT
00 NOOP
01100 STORE
00 NOOP
0100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
0100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
1111100 ADD
00 NOOP
0111100 NEG
00 NOOP
011100 STORE
00 NOOP
111100 ZERO
00 NOOP
11111100 NOOP







1100 00 1111100 00 1111100 00
ONE        I | _ | V*
-NOP
DADD       I | _ | V _*
-NOP
NOP
-NOP


11100 11111100 111111100 111111100
ZERO       O | _ | V _*
-ZERO      O | O | V _*
INT/IO     O | O | V T*
-LOAD	   O | T | V T*

111100 0110100 1111100
ONE        I | T | V T*
-NOP
DADD       I | T | V T _*

                  ( first occurrence of T is now C )
1100 00 111100 01100
-STORE     I | T | V C T*
DADD       I | T | V C T _*
-ZERO      I | O | V C T _*
STORE      I | O | V C T I*

111100 1111110100 1111100 00
-NOT       I | I | V C T I*
NOP
-ADD       I | 2 | V C T I*
NOP

00 00 1111111100 00
-ADD       I | 3 | V C T I*
NOP
-NEG       I | -3 | V C T I*
NOP

11100 111100 111111111100 11100
-STORE     I | -3 | V C T -3*
LOAD       -3 | -3 | V C T -3*
-NOP
DADD       -3 | -3 | V* C T -3

00 111111100 00 111100
-NOP
ONE        I | -3 | V* C T -3
-NOP
PADD       (proceed to next instruction)

    MOVE OP POINTER TO PADD FACING CW
    MATH POINTER IS ON -NOOP FACING CW
    MEM POINTER IS ON V


BEGIN LOOP

    OP POINTER IS AT PADD FACING CW
    MATH POINTER IS ON -NOOP FACING CW
    MEM POINTER IS ON V

           _ | _ | V* C T -3
00 11111100 00
-NOP
NOP
-NOP

1100 00 1111100 00
ONE        I | _ | V* C T -3
-NOP
DADD       I | _ | V C* T -3
-NOP

1111111100 100 11111111100 1111111111100
ZERO       O | _ | V C* T -3
-LOAD      O | C | V C* T -3
NOP
-NOP


11111111100 IF

    If C is zero (exit condition), program pointer moves ahead as usual.
    If C is nonzero (continue condition), program pointer stays in place.

00    (one step back for continue condition)
         (EXIT)   -NOP, OP FACING CW
	 (CONT)   -NOP, OP FACING CCW

11100 (move three steps)
         (EXIT)   NOP, OP FACING CW
         (CONT)   PADD, OP FACING CCW

00    (one step back for continue condition)
         (EXIT)   -NOP, OP FACING CW
         (CONT)   -NOP, OP FACING CW

100 (move one step)
         (EXIT)   EXIT, program terminates
         (CONT)   DADD


           O | C | V C* T -3

00 1111100 11111100 00
-NOP
NOP
-ZERO      O | O | V C* T -3
NOP

111100 00 100 00
-NOT       O | I | V C* T -3
NOP
-NEG       O | -I | V C* T -3
NOP

111100 00
-ADD       O | C-I | V C* T -3
NOP
             ( C is decremented ... C now denotes the new value )
0110100 00
-STORE     O | C | V C* T -3
NOP


111111111100 1100 0110100 1111100 111100 00
-NOP
ONE        I | C | V C* T -3
-NEG       I | -C | V C* T -3
DADD       I | -C | V C T* -3
-ADD       I | T-C | V C T* -3
DADD       I | T-C | V C T -3*

011110100 00 1100 00
-NOP
DADD       I | T-C | V C T -3 _*
-STORE     I | T-C | V C T -3 T-C*
DADD       I | T-C | V C T -3 T-C _*

01110100 1111100
-NOP
NOP

PRINT 'C':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP

PRINT 'a':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP

PRINT 's':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000

 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP

PRINT 'e':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000

 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP

PRINT ' ':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP

PRINT '#':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP


          I | T-C | V C T -3 T-C _*

11111100 00 111100 00
-ZERO     I | O | V C T -3 T-C _*
NOP
-NOT      I | I | V C T -3 T-C _*
NOP

100 00 11100 111100
-NEG      I | -I | V C T -3 T-C _*
NOP
-STORE    I | -I | V C T -3 T-C -I*
LOAD      -I | -I | V C T -3 T-C -I*

01110100 11100 00 111111100
-NOP
DADD      -I | -I | V C T -3 T-C* -I
-NOP
ONE       I | -I | V C T -3 T-C* -I

00 0111100 00 11100
-NOP
INT/IO   (print case number)
-NOP
DADD      I | -I | V C T -3 T-C -I*

00 01111100
-NOP
NOP


PRINT ':':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP

PRINT ' ':
11111100 00  -ZERO, NOP
111100 00    -NOT, NOP
111100 00    -STORE, NOP
   -ADD, NOP REPEATEDLY ...
    1 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
 0000 0000
0100 111100    -STORE, LOAD
1100 01111100  -NOP, ASCII/IO
10100 0100     -NOP, NOP


          _ | _ | V C T -3 T-C -I*

00 1100 11111100 111111111100 11111100 00
-NOP
ONE       I | _ | V C T -3 T-C -I*
-ZERO     I | O | V C T -3 T-C -I*
NOP
-NOP
NOP


00 111111100 00 1111100 00
-NOP
DADD      I | -I | V C T -3 T-C -I _*
-NOP
NOP
-NOP



###################



BEGIN MAIN


  LOCAL MEMORY 
  | A  B  x  _  -5  _  -7  O  c  -IO
 
  x will cycle through the numbers I, 4, 9, I2I, and 484
  c is initialized to O and increments whenever A <= x <= B
  negative numbers are memory address pointers


BEGIN SETUP

11100 ZERO
00 NOOP
01111100 INTIO      READ A
00 NOOP
0111100 ONE
00 NOOP
1111100 DADD
00 NOOP
0111100 ZERO
00 NOOP
1111100 INTIO    READ B
11111100 ZERO
0111100 ONE
111100 NOT
1111100 DADD
111100 STORE     STORE I INTO x
00 DADD
01100 NOOP
00 DADD
11111100 ZERO
01100 STORE
0111100 NOT
1111100 NOOP
1111100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0111100 NEG
00 NOOP
011100 STORE     
1111100 DADD
01100 NOOP
00 DADD
01100 STORE   
01111100 NOOP
111100 ZERO
00 NOOP
111100 NOT
00 NOOP
100 NEG
00 NOOP
111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
00 NOOP
111100 NOT
00 NOOP
100 NEG
00 NOOP
111100 ADD
00 NOOP
0100 STORE
00 NOOP
0111100 ZERO
01111100 DADD
0111100 STORE
00 DADD
00 STORE
00 DADD
0111100 ZERO
01111100 NOOP
111100 NOT
00 NOOP
100 NEG
00 NOOP
11100 STORE
00 NOOP
100 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
0100 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
111100 LOAD
1100 NOOP
11100 DADD
00 NOOP

END SETUP

 go back to beginning of local memory


PROCESS I

01111100 ONE
0100 LOAD
01111100 DADD
0100 NOOP
00 DADD
100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
01100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
0100 LOAD
00 DADD
01100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
0111100 MULT
00 DADD
0111100 NOOP
00 DADD
111100 >
00 DADD
01100 NOT
1111100 NOOP
1111100 ADD
00 NOOP
0100 STORE
01111100 DADD
1100 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP



STORE 4 AND PROCESS

01111100 ONE
11111100 ZERO
01111100 DADD
0111100 NOT
00 DADD
111100 STORE
1111100 NOOP
100 ADD
00 NOOP
0100 STORE
00 NOOP
0100 ADD
00 NOOP
0100 STORE
01111100 DADD
1100 NOOP
00 DADD
00 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP

01111100 ONE
0100 LOAD
01111100 DADD
0100 NOOP
00 DADD
100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
01100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
0100 LOAD
00 DADD
01100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
0111100 MULT
00 DADD
0111100 NOOP
00 DADD
111100 >
00 DADD
01100 NOT
1111100 NOOP
1111100 ADD
00 NOOP
0100 STORE
01111100 DADD
1100 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP



STORE 9 AND PROCESS

01111100 ONE
11111100 ZERO
01111100 DADD
0111100 NOT
00 DADD
111100 STORE
1111100 NOOP
100 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
01100 MULT
00 NOOP
01100 STORE
01111100 DADD
1100 NOOP
00 DADD
00 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP

01111100 ONE
0100 LOAD
01111100 DADD
0100 NOOP
00 DADD
100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
01100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
0100 LOAD
00 DADD
01100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
0111100 MULT
00 DADD
0111100 NOOP
00 DADD
111100 >
00 DADD
01100 NOT
1111100 NOOP
1111100 ADD
00 NOOP
0100 STORE
01111100 DADD
1100 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP


STORE I2I AND PROCESS

01111100 ONE
11111100 ZERO
01111100 DADD
0111100 NOT
00 DADD
111100 STORE
1111100 NOOP
100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
01100 MULT
00 NOOP
01100 STORE
01111100 DADD
1100 NOOP
00 DADD
00 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP

01111100 ONE
0100 LOAD
01111100 DADD
0100 NOOP
00 DADD
100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
01100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
0100 LOAD
00 DADD
01100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
0111100 MULT
00 DADD
0111100 NOOP
00 DADD
111100 >
00 DADD
01100 NOT
1111100 NOOP
1111100 ADD
00 NOOP
0100 STORE
01111100 DADD
1100 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP


STORE 484 AND PROCESS

01111100 ONE
11111100 ZERO
01111100 DADD
0111100 NOT
00 DADD
111100 STORE
1111100 NOOP
100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
0100 ADD
00 NOOP
0100 STORE
00 NOOP
01100 MULT
00 NOOP
01100 STORE
01111100 DADD
1100 NOOP
00 DADD
00 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP

01111100 ONE
0100 LOAD
01111100 DADD
0100 NOOP
00 DADD
100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
01100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
0100 LOAD
00 DADD
01100 NEG
00 DADD
011100 STORE
00 DADD
01100 NOOP
011100 LOAD
00 NOOP
011100 DADD
00 NOOP
01111100 ONE
00 NOOP
01111100 DADD
00 NOOP
00 DADD
0100 LOAD
00 DADD
1100 ADD
00 DADD
011100 NOOP
00 DADD
0111100 MULT
00 DADD
0111100 NOOP
00 DADD
111100 >
00 DADD
01100 NOT
1111100 NOOP
1111100 ADD
00 NOOP
0100 STORE


PRINT RESULT AND NEWLINE

01100 INTIO
0111100 ZERO
01100 NOOP
111100 NOT
00 NOOP
111100 STORE
00 NOOP
100 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
00 ADD
00 NOOP
0100 STORE
00 NOOP
0100 ADD
00 NOOP
0100 STORE
0100 ASCIO
0111100 ZERO
111100 DADD
11111100 NOOP
11100 LOAD
00 NOOP
011100 DADD
00 NOOP
1111100 NOOP
00 NOOP




END MAIN


          _ | _ | V C T -3 T-C -I _*

00 11111100 00 111100
NOP
-ZERO     _ | O | V C T -3 T-C -I _*
NOP
-NOT      _ | I | V C T -3 T-C -I _*

00 111100 00 100
NOP
-STORE    _ | I | V C T -3 T-C -I I*
NOP
-ADD      _ | 2 | V C T -3 T-C -I I*

00 00 00 00
NOP
-ADD      _ | 3 | V C T -3 T-C -I I*
NOP
-ADD      _ | 4 | V C T -3 T-C -I I*

00 00 00 00
NOP
-ADD      _ | 5 | V C T -3 T-C -I I*
NOP
-ADD      _ | 6 | V C T -3 T-C -I I*

00 1111111100 00 11100
NOP
-NEG      _ | -6 | V C T -3 T-C -I I*
NOP
-STORE    _ | -6 | V C T -3 T-C -I -6*

111100 01110100 11100 00
LOAD      -6 | -6 | V C T -3 T-C -I -6*
-NOP
DADD      -6 | -6 | V* C T -3 T-C -I -6
-NOP

011110100 00
LOAD      V | -6 | V* C T -3 T-C -I -6
-NOP
 
    MOVE OP POINTER TO PADD FACING CW
    MATH POINTER IS ON -NOOP FACING CW
    MEM POINTER IS ON V


1100

PADD      (GOTO BEGINNING OF LOOP)

END LOOP


END PROGRAM
