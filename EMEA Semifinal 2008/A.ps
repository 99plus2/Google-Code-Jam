%!PS
%
% Problem: Scaled Triangle
% Language: PostScript
% Author: KirarinSnow
% Usage: gs -q -dNODISPLAY -dNOPROMPT -dBATCH thisfile.ps <input.in >output.out


% This program uses PostScript's built-in two-dimensional affine transformation matrix
% capabilities to compute the solution.

% For reference, a PS matrix is an array [a b c d tx ty]
% representing the 2-d affine transformation matrix
%         ( a  b  0
%           c  d  0
%           tx ty 1 )


% Operator to read in a token
/rd {(%stdin) (r) file token pop} def

% Loop over cases:
1 1 rd
{
    % Print case number
    (Case #) print 5 string cvs print (: ) print


    % Read input in this form:
    %        x1 y1 x2 y2 x3 y3
    %        z1 w1 z2 w2 z3 w3

    [ /x1 /y1 /x2 /y2 /x3 /y3
      /z1 /w1 /z2 /w2 /z3 /w3 ]
      {rd def} forall

    % This equation holds (n = 1,2,3):
    %      ( a b   * ( x_n   + ( e   = ( z_n
    %        c d )     y_n )     f )     w_n )
    % Each x_n is mapped to a corresponding z_n, and each y_n is mapped to a corresponding w_n.

    % We are solving for the coefficients a through f.
    % We can turn this system of 6 variables into 2 systems of 3 variables:
    %      ( x1  y1  1     ( a     ( z1
    %        x2  y2  1   *   b   =   z2
    %        x3  y3  1 )     e )     z3 )
    % and
    %      ( x1  y1  1     ( c     ( w1
    %        x2  y2  1   *   d   =   w2
    %        x3  y3  1 )     f )     w3 )

    % First system:
    
    % Since in a PS matrix the rightmost column must be (0; 0; 1),
    % we can row-reduce by subtracting the last row from each of the others:
    %      ( (x1-x3) (y1-y3) 0      ( a    ( (z1-z3)
    %        (x2-x3) (y2-y3) 0   *    b  =   (z2-z3)
    %        x3      y3      1 )      e )    z3      )
    
    % Let us compute the left-hand-side matrix A
    %         ( (x1-x3) (y1-y3) 0
    %           (x2-x3) (y2-y3) 0
    %           x3      y3      1 )

    /A [ x1 x3 sub      y1 y3 sub
         x2 x3 sub      y2 y3 sub
	 x3             y3         ] def

    % We can also represent the right-hand-side column vector B as a matrix in which only
    % the first column is relevant; we can fill the second column with 0's.
    %         ( (z1-z3)
    %           (z2-z3)
    %            z3     )
    
    /B [ z1 z3 sub      0
         z2 z3 sub      0
	 z3             0 ] def

    % To solve for the unknowns, we invert A and matrix-multiply it with B.
    % The first column of the result is the vector ( a; b; e ).
    % We can do this with built-in PS operators.

    A matrix invertmatrix    % compute A^-1
    B matrix concatmatrix    % compute A^-1 * B

    /result exch def         % store the result:  [a 0 b 0 e 0]

    % Let us extract the values of a, b, and e:
    /a result 0 get def
    /b result 2 get def
    /e result 4 get def


    % Second system:

    % This is similar to the previous system. We perform the same operations.
    % A remains the same, but the right-hand-side vector is different.
    % We call it C:

    /C [ w1 w3 sub      0
         w2 w3 sub      0
	 w3             0 ] def

    % Inverting and multiplying:
    A matrix invertmatrix
    C matrix concatmatrix
    /result exch def

    % Extracting the values of c, d, and f:
    /f result 4 get def
    /c result 0 get def
    /d result 2 get def

    % We have solved for the six unknowns.

    % To find the fixed point (x0, y0), we establish the following identity:
    %      ( a b   * ( x0   + ( e   = ( x0
    %        c d )     y0 )     f )     y0 )

    % This is equal to
    %      ( (1-a)  -b      * ( x0   = ( e
    %        -c     (1-d) )     y0 )     f )

    % To solve for (x0; y0), we define the left-hand-side matrix M.
    % The bottom row is insignificant.

    /M [ 1 a sub      b neg
         c neg        1 d sub
         0            0        ] def

    % The right-hand-side vector can also be represented as a matrix N.

    /N [ e            0
         f            0
	 0            0  ] def

    % We invert M and multiply it by N:

    M matrix invertmatrix
    N matrix concatmatrix
    /result exch def
    /x0 result 0 get def
    /y0 result 2 get def

    % HACK: To avoid printing inaccurate results due to numerical error blowup,
    %       Compute the midpoint of the bounding box if the two points are sufficiently similar.
    %       This affects one test case in each data set.
    x1 z1 sub abs 0.0005 z1 mul abs lt
    x2 z2 sub abs 0.0005 z2 mul abs lt and
    x3 z3 sub abs 0.0005 z3 mul abs lt and
    y1 w1 sub abs 0.0005 w1 mul abs lt and
    y2 w2 sub abs 0.0005 w2 mul abs lt and
    y3 w3 sub abs 0.0005 w3 mul abs lt and
    {
	x1 x2 max x3 max
	x1 x2 min x3 min
	add 2 div
	/x0 exch def
	y1 y2 max y3 max
	y1 y2 min y3 min
	add 2 div
	/y0 exch def
    } if
    
    % Print solution
    x0 ==only
    ( ) print
    y0 ==
} for
